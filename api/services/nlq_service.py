"""
Service NLQ - Traitement des requ√™tes en langage naturel
R√©utilise la logique du nlq.py sans le modifier
"""

import pandas as pd
from langchain_openai import ChatOpenAI
from langchain_experimental.agents import create_pandas_dataframe_agent
import os
from dotenv import load_dotenv
import ast
from typing import Dict, List, Any, Optional
import asyncio
import logging

from ..models.api_models import QueryResponse, QuestionsResponse
from ..config.settings import get_settings

# Load environment variables
load_dotenv()

logger = logging.getLogger(__name__)

class NLQService:
    """Service pour le traitement de requ√™tes en langage naturel"""
    
    def __init__(self):
        self.settings = get_settings()
        self.llm = ChatOpenAI(
            model="gpt-4o-mini",
            temperature=0.1,
            api_key=os.getenv("OPENAI_API_KEY")
        )
        
    async def process_query(
        self, 
        query: str, 
        dataframe: pd.DataFrame, 
        chat_history: List[Dict] = None
    ) -> QueryResponse:
        """
        Traite une requ√™te en langage naturel sur les donn√©es
        R√©utilise la logique de l'agent pandas du nlq.py
        """
        try:
            # Cr√©er l'agent pandas avec le m√™me syst√®me de prompt que nlq.py
            agent = create_pandas_dataframe_agent(
                llm=self.llm,
                df=dataframe,
                verbose=True,
                allow_dangerous_code=True,
                agent_executor_kwargs={
                    'handle_parsing_errors': True,
                    'max_iterations': 3
                },
                prefix="""
                Tu es un expert en analyse de donn√©es et un data scientist senior avec plus de 10 ans d'exp√©rience.
                Tu travailles avec un DataFrame pandas pour r√©pondre aux questions business de mani√®re professionnelle.
                
                INSTRUCTIONS IMPORTANTES:
                
                1. üìä ANALYSE BUSINESS : Adopte toujours une perspective d'analyste senior qui comprend les enjeux business
                2. üéØ R√âPONSES PR√âCISES : Sois factuel, pr√©cis et actionnable dans tes r√©ponses
                3. üí° INSIGHTS STRAT√âGIQUES : Va au-del√† des chiffres, explique ce qu'ils signifient pour le business
                4. üìà COMPARAISONS INTELLIGENTES : Utilise des r√©f√©rences et des contextes pertinents
                5. ‚ö° EFFICACIT√â : Code propre et optimis√©, pas de solutions compliqu√©es pour des probl√®mes simples
                
                FORMAT DE R√âPONSE OBLIGATOIRE:
                - Commence par un r√©sum√© ex√©cutif clair
                - Donne les chiffres cl√©s avec leur contexte business
                - Ajoute 2-3 insights strat√©giques
                - Propose des recommandations d'actions si pertinent
                
                Tu as acc√®s √† ces outils:
                """
            )
            
            # Ex√©cuter la requ√™te
            result = await asyncio.get_event_loop().run_in_executor(
                None, 
                lambda: agent.invoke({"input": query})
            )
            
            # Extraire la r√©ponse
            answer = result.get("output", "")
            
            # V√©rifier s'il y a du code ex√©cut√©
            code_executed = None
            if hasattr(result, 'intermediate_steps') and result.intermediate_steps:
                for step in result.intermediate_steps:
                    if hasattr(step[0], 'tool') and step[0].tool == 'python_repl_ast':
                        code_executed = step[0].tool_input
                        break
            
            return QueryResponse(
                session_id="default",
                query=query,
                answer=answer,
                code_executed=code_executed,
                has_chart=False,
                execution_time=None
            )
            
        except Exception as e:
            logger.error(f"Erreur lors du traitement de la requ√™te: {str(e)}")
            return QueryResponse(
                session_id="default",
                query=query,
                answer=f"Erreur lors du traitement de votre requ√™te: {str(e)}",
                code_executed=None,
                has_chart=False,
                execution_time=None,
                success=False
            )
    
    async def generate_smart_questions(
        self, 
        dataframe: pd.DataFrame, 
        context: str = None
    ) -> List[Dict[str, str]]:
        """
        G√©n√®re des suggestions de questions intelligentes
        R√©utilise la fonction generate_smart_questions du nlq.py
        """
        try:
            # Analyser la structure des donn√©es
            numeric_cols = dataframe.select_dtypes(include=['number']).columns.tolist()
            categorical_cols = dataframe.select_dtypes(include=['object', 'category']).columns.tolist()
            date_cols = dataframe.select_dtypes(include=['datetime64']).columns.tolist()
            
            # √âchantillon des donn√©es pour l'analyse
            sample_data = dataframe.head(3).to_string()
            
            prompt = f"""
            Analyse ce dataset et sugg√®re 6 questions pertinentes et int√©ressantes qu'un analyste pourrait poser.
            
            Structure des donn√©es:
            - Colonnes num√©riques: {numeric_cols}
            - Colonnes cat√©gorielles: {categorical_cols}
            - Colonnes dates: {date_cols}
            - Nombre de lignes: {len(dataframe)}
            
            √âchantillon des donn√©es:
            {sample_data}
            
            {f"Contexte additionnel: {context}" if context else ""}
            
            G√©n√®re 6 questions vari√©es et pertinentes:
            - 2 questions d'exploration g√©n√©rale (distribution, aper√ßu)
            - 2 questions de comparaison/segmentation
            - 2 questions d'analyse approfondie (corr√©lations, tendances)
            
            Format: retourne uniquement une liste Python de dictionnaires avec 'question' et 'category'.
            Exemple: [
                {"question": "Question 1?", "category": "exploration"},
                {"question": "Question 2?", "category": "comparaison"},
                ...
            ]
            """
            
            response = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.llm.invoke(prompt)
            )
            
            suggestions_text = response.content.strip()
            
            # Extraire la liste des questions
            try:
                questions = ast.literal_eval(suggestions_text)
                if isinstance(questions, list) and all(isinstance(q, dict) for q in questions):
                    return questions
            except Exception:
                # Fallback: extraire manuellement
                lines = suggestions_text.split('\n')
                questions = []
                categories = ["exploration", "comparaison", "analyse", "insights", "tendances", "distribution"]
                cat_index = 0
                
                for line in lines:
                    if '?' in line:
                        # Nettoyer la ligne
                        clean_question = line.strip().strip('"\'').strip('- ').strip('* ')
                        if len(clean_question) > 10:
                            questions.append({
                                "question": clean_question,
                                "category": categories[cat_index % len(categories)]
                            })
                            cat_index += 1
                            
                return questions[:6]
                
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration des questions: {str(e)}")
            return [
                {"question": "Quelles sont les statistiques principales de ce dataset?", "category": "exploration"},
                {"question": "Y a-t-il des valeurs aberrantes dans les donn√©es?", "category": "qualit√©"},
                {"question": "Comment les donn√©es sont-elles distribu√©es?", "category": "distribution"}
            ]
    
    def get_chart_recommendation(
        self, 
        dataframe: pd.DataFrame, 
        question: str, 
        answer: str
    ) -> Optional[str]:
        """
        Demande √† l'IA si un graphique serait utile et lequel
        R√©utilise la fonction get_chart_recommendation du nlq.py
        """
        try:
            # Obtenir les informations sur les colonnes
            numeric_cols = dataframe.select_dtypes(include=['number']).columns.tolist()
            categorical_cols = dataframe.select_dtypes(include=['object', 'category']).columns.tolist()
            date_cols = dataframe.select_dtypes(include=['datetime64']).columns.tolist()
            
            if len(numeric_cols) == 0:
                return None
            
            # Cr√©er le prompt pour l'IA avec des r√®gles claires
            chart_prompt = f"""
            Bas√© sur cette question: "{question}"
            Et cette r√©ponse: "{answer}"
            
            Colonnes disponibles EXACTEMENT (utilise ces noms pr√©cis):
            - Num√©riques: {numeric_cols}
            - Cat√©gorielles: {categorical_cols}
            - Dates: {date_cols}
            
            R√àGLES IMPORTANTES pour d√©cider si cr√©er un graphique:
            
            NE PAS cr√©er de graphique si:
            - La r√©ponse est juste un nombre simple (ex: "Il y a 43 utilisateurs...")
            - C'est une statistique unique (moyenne, somme, total, pourcentage simple)
            - La question demande juste un comptage ou un calcul
            - La r√©ponse est descriptive sans donn√©es √† visualiser
            
            CR√âER un graphique seulement si:
            - Il y a une comparaison entre plusieurs cat√©gories/groupes
            - Il y a une distribution/r√©partition √† visualiser (ex: "distribution des taux")
            - Il y a une √©volution dans le temps √† montrer
            - Il y a des relations/corr√©lations entre variables
            - Cela aide vraiment √† la compr√©hension des donn√©es
            
            Types de graphiques recommand√©s:
            - bar: comparaisons entre cat√©gories, classements
            - boxplot: distribution d'une variable num√©rique par cat√©gories
            - violin: distribution plus d√©taill√©e que boxplot
            - hist: distribution d'une seule variable num√©rique
            - line: √©volution temporelle, tendances
            - scatter: relation entre deux variables num√©riques
            - heatmap: corr√©lations multiples, matrices
            - pie: proportions (max 6-8 cat√©gories)
            - area: √©volution de volumes dans le temps
            - density: distribution continue liss√©e
            
            Si un graphique est utile, utilise les NOMS EXACTS des colonnes list√©es ci-dessus.
            
            Si OUI, r√©ponds EXACTEMENT dans ce format:
            GRAPHIQUE: OUI
            TYPE: [bar/boxplot/line/scatter/hist/heatmap]
            COLONNES: [nom_exact_colonne1, nom_exact_colonne2]
            TITRE: [titre du graphique]
            
            Si NON, r√©ponds simplement:
            GRAPHIQUE: NON
            """
            
            chart_response = self.llm.invoke(chart_prompt)
            chart_decision = chart_response.content.strip()
            
            if "GRAPHIQUE: NON" in chart_decision:
                return None
                
            if "GRAPHIQUE: OUI" in chart_decision:
                return chart_decision
                
            return None
            
        except Exception as e:
            logger.error(f"Erreur lors de la recommandation de graphique: {str(e)}")
            return None